{"version":3,"sources":["scripts/main.js"],"names":["scoreDisplay","document","querySelector","button","cells","querySelectorAll","messages","loseMessage","winMessage","gameSize","winScore","score","gameGrid","getRandomNumber","Math","floor","random","startGame","renderGameBoard","i","setRandomCell","textContent","row","col","cellValue","cell","innerHTML","classList","add","remove","cellText","createElement","appendChild","resetGame","forEach","rowIndex","fill","message","style","display","x","y","checkGameStatus","hasEmptyTile","hasWinningTile","canMove","mergeTiles","newRow","newCol","moveUp","moved","moveDown","moveLeft","moveRight","addEventListener","e","contains","className","preventDefault","key"],"mappings":"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","file":"main.b2dc82fa.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst scoreDisplay = document.querySelector('.game-score');\nconst button = document.querySelector('.start');\nconst cells = document.querySelectorAll('.field-cell');\nconst messages = document.querySelectorAll('.message');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\n\nconst gameSize = 4;\nconst winScore = 2048;\nlet score = 0;\n\nconst gameGrid = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nfunction getRandomNumber() {\n  return Math.floor(Math.random() * 4);\n}\n\nbutton.addEventListener('click', (e) => {\n  if (button.classList.contains('start')) {\n    startGame();\n    button.className = 'button restart';\n    button.textContent = 'Restart';\n\n    messages.forEach(message => {\n      message.classList.add('hidden');\n    });\n  } else if (button.classList.contains('restart')) {\n    loseMessage.classList.add('hidden');\n    winMessage.classList.add('hidden');\n\n    cells.forEach(cell => {\n      cell.textContent = '';\n      cell.className = 'field-cell';\n    });\n    resetGame();\n    startGame();\n  }\n});\n\ndocument.addEventListener('keydown', e => {\n  e.preventDefault();\n\n  switch (e.key) {\n    case 'ArrowUp':\n      moveUp();\n      break;\n    case 'ArrowDown':\n      moveDown();\n      break;\n    case 'ArrowLeft':\n      moveLeft();\n      break;\n    case 'ArrowRight':\n      moveRight();\n      break;\n    default:\n      break;\n  }\n});\n\nfunction startGame() {\n  renderGameBoard();\n\n  for (let i = 0; i < 2; i++) {\n    setRandomCell();\n  }\n}\n\nfunction renderGameBoard() {\n  scoreDisplay.textContent = score;\n\n  for (let row = 0; row < gameSize; row++) {\n    for (let col = 0; col < gameSize; col++) {\n      const cellValue = gameGrid[row][col];\n      const cell = cells[row * gameSize + col];\n\n      cell.innerHTML = '';\n\n      if (cellValue !== 0) {\n        cell.classList.add(`cell-${cellValue}`);\n      } else {\n        cell.classList.remove(`cell-${winScore}`);\n      }\n\n      if (cellValue !== 0) {\n        const cellText = document.createElement('span');\n\n        cellText.textContent = cellValue;\n        cell.appendChild(cellText);\n      }\n    }\n  }\n}\n\nfunction resetGame() {\n  gameGrid.forEach((row, rowIndex) => {\n    row.fill(0);\n  });\n\n  score = 0;\n\n  renderGameBoard();\n  setRandomCell();\n  setRandomCell();\n\n  messages.forEach((message) => {\n    message.style.display = 'none';\n  });\n}\n\nfunction setRandomCell() {\n  const [x, y] = [getRandomNumber(), getRandomNumber()];\n\n  if (gameGrid[x][y] === 0) {\n    gameGrid[x][y] = Math.random() >= 0.9 ? 4 : 2;\n    checkGameStatus();\n  } else {\n    setRandomCell();\n  }\n}\n\nfunction checkGameStatus() {\n  let hasEmptyTile = false;\n  let hasWinningTile = false;\n\n  gameGrid.forEach((row) => {\n    row.forEach((cellValue) => {\n      if (cellValue === winScore) {\n        hasWinningTile = true;\n      }\n\n      if (cellValue === 0) {\n        hasEmptyTile = true;\n      }\n\n      messages.forEach((message) => {\n        message.style.display = 'none';\n      });\n    });\n  });\n\n  if (hasWinningTile) {\n    winMessage.style.display = 'block';\n  } else if (!hasEmptyTile && !canMove()) {\n    loseMessage.style.display = 'block';\n  }\n}\n\nfunction canMove() {\n  for (let row = 0; row < gameSize; row++) {\n    for (let col = 0; col < gameSize; col++) {\n      if (\n        (row > 0 && gameGrid[row][col] === gameGrid[row - 1][col])\n        || (row < gameSize - 1 && gameGrid[row][col] === gameGrid[row + 1][col])\n        || (col > 0 && gameGrid[row][col] === gameGrid[row][col - 1])\n        || (col < gameSize - 1 && gameGrid[row][col] === gameGrid[row][col + 1])\n      ) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction mergeTiles(row, col, newRow, newCol) {\n  gameGrid[newRow][newCol] += gameGrid[row][col];\n  score += gameGrid[newRow][newCol];\n  gameGrid[row][col] = 0;\n}\n\nfunction moveUp() {\n  let moved = false;\n\n  for (let col = 0; col < gameSize; col++) {\n    for (let row = 1; row < gameSize; row++) {\n      if (gameGrid[row][col] !== 0) {\n        let newRow = row;\n\n        while (newRow > 0 && gameGrid[newRow - 1][col] === 0) {\n          gameGrid[newRow - 1][col] = gameGrid[newRow][col];\n          gameGrid[newRow][col] = 0;\n          newRow--;\n          moved = true;\n        }\n\n        if (newRow > 0 && gameGrid[newRow - 1][col] === gameGrid[newRow][col]) {\n          mergeTiles(newRow, col, newRow - 1, col);\n          moved = true;\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    setRandomCell();\n    renderGameBoard();\n  }\n}\n\nfunction moveDown() {\n  let moved = false;\n\n  for (let col = 0; col < gameSize; col++) {\n    for (let row = gameSize - 2; row >= 0; row--) {\n      if (gameGrid[row][col] !== 0) {\n        let newRow = row;\n\n        while (newRow < gameSize - 1 && gameGrid[newRow + 1][col] === 0) {\n          gameGrid[newRow + 1][col] = gameGrid[newRow][col];\n          gameGrid[newRow][col] = 0;\n          newRow++;\n          moved = true;\n        }\n\n        if (newRow < gameSize - 1\n          && gameGrid[newRow + 1][col] === gameGrid[newRow][col]) {\n          mergeTiles(newRow, col, newRow + 1, col);\n          moved = true;\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    setRandomCell();\n    renderGameBoard();\n  }\n}\n\nfunction moveLeft() {\n  let moved = false;\n\n  for (let row = 0; row < gameSize; row++) {\n    for (let col = 1; col < gameSize; col++) {\n      if (gameGrid[row][col] !== 0) {\n        let newCol = col;\n\n        while (newCol > 0 && gameGrid[row][newCol - 1] === 0) {\n          gameGrid[row][newCol - 1] = gameGrid[row][newCol];\n          gameGrid[row][newCol] = 0;\n          newCol--;\n          moved = true;\n        }\n\n        if (newCol > 0 && gameGrid[row][newCol - 1] === gameGrid[row][newCol]) {\n          mergeTiles(row, newCol, row, newCol - 1);\n          moved = true;\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    setRandomCell();\n    renderGameBoard();\n  }\n}\n\nfunction moveRight() {\n  let moved = false;\n\n  for (let row = 0; row < gameSize; row++) {\n    for (let col = gameSize - 2; col >= 0; col--) {\n      if (gameGrid[row][col] !== 0) {\n        let newCol = col;\n\n        while (newCol < gameSize - 1 && gameGrid[row][newCol + 1] === 0) {\n          gameGrid[row][newCol + 1] = gameGrid[row][newCol];\n          gameGrid[row][newCol] = 0;\n          newCol++;\n          moved = true;\n        }\n\n        if (newCol < gameSize - 1\n          && gameGrid[row][newCol + 1] === gameGrid[row][newCol]) {\n          mergeTiles(row, newCol, row, newCol + 1);\n          moved = true;\n        }\n      }\n    }\n  }\n\n  if (moved) {\n    setRandomCell();\n    renderGameBoard();\n  }\n}\n\nstartGame();\n"]}